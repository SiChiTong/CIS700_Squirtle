#!/usr/bin/env python

'''
Node to send speech status to the robot state
by Siddharth Srivatsa

Publishes - /current_subroutine_status
Subscribes - /nexusMessage, /current_task
'''


import roslib
import rospy
import os
import sys
from std_msgs.msg import *
from geometry_msgs.msg import *

class speechStatus():

	def CurTaskCallback(self, data):
		self.speechTask = data.data.partition(' ')[0]

#	Check which button is pressed on the nexus 
	def buttonCallback(self, data):
		self.buttonPress = data.data
		if self.buttonPress == "button_pressed":
			self.fixmeflag = 1

	def __init__(self, argument):
		self.fixmeflag = 0
		self.subRoutineStatus = 0
		self.buttonPress = "not_init"
#		Map the tasks to the appropriate voice commands
		self.speechCommand = {
			'retrieve_object' : 'python ~/catkin_ws/src/CIS700_Squirtle/squirtle_speech/include/speech_retrieve_object.py',
			'deliver_object' : 'python ~/catkin_ws/src/CIS700_Squirtle/squirtle_speech/include/speech_deliver_object.py',
			'deliver_message' : 'python ~/catkin_ws/src/CIS700_Squirtle/squirtle_speech/include/speech_deliver_object.py',
			'find_person' : 'python ~/catkin_ws/src/CIS700_Squirtle/squirtle_speech/include/speech_find_person.py',
		}
		rospy.init_node("speechStatus", anonymous=True)
#		Initialize the publishers and subscribers
		self.SubRoutineStatusPub = rospy.Publisher('current_subroutine_status', String, queue_size=10)
		rospy.Subscriber("/current_task", String, self.CurTaskCallback)
		rospy .Subscriber("/nexusMessage", String, self.buttonCallback)
		rate = rospy.Rate(10) # Publish at 10hz

		while not rospy.is_shutdown():
#			Publish the appropriate message according to which button is pressed
			#if self.buttonPress == "button_pressed":
			if self.fixmeflag == 1:
				self.SubRoutineStatusPub.publish("complete")
				self.fixmeflag=0
			elif self.buttonPress == "button_not_pressed":
				os.system(self.speechCommand[self.speechTask] + " " + argument)
				self.SubRoutineStatusPub.publish("going_on")
			else:
				self.SubRoutineStatusPub.publish("Not initialized")
			rate.sleep()
		rospy.spin()

if __name__ == '__main__':
	if len(sys.argv) != 4:
		print("usage: my_node.py arg1")
	else:
		speechStatus((sys.argv[1]))
